# Example 1: Basic WebSocket load balancing with IP hash persistence
upstream websocket_cluster1 {
    method weighted_round_robin;
    persistence ip_hash;  # IP-based persistence ensures clients stay on same backend
    
    server http://backend1:8001 weight=3;
    server http://backend2:8001 weight=2;
    server http://backend3:8001 weight=1;
}

# Example 2: WebSocket with cookie-based persistence for web applications
upstream websocket_cluster2 {
    method least_connections;
    persistence cookie;  # Cookie persistence works well with browser-based WebSocket clients
    
    server http://backend1:8002 weight=1;
    server http://backend2:8002 weight=1;
    server http://backend3:8002 weight=1;
}

# Example 3: WebSocket with consistent hash persistence based on path
# Good for scaling WebSocket services with path-based routing
upstream websocket_cluster3 {
    method weighted_round_robin;
    persistence consistent_hash;  # Routes similar paths to same backend
    
    server http://backend1:8003 weight=1;
    server http://backend2:8003 weight=1;
    server http://backend3:8003 weight=1;
}

# Example 4: High-frequency WebSocket cluster optimized for many connections
# Using least connections to prevent any single backend from being overloaded
upstream websocket_realtime {
    method least_connections;
    persistence ip_hash;  # IP hash works well for non-browser clients too
    
    server http://realtime1:9000 weight=1;
    server http://realtime2:9000 weight=1;
    server http://realtime3:9000 weight=1;
    server http://realtime4:9000 weight=1;
    server http://realtime5:9000 weight=1;
}

# Example 5: Game server WebSocket cluster
# Using weighted distribution for servers with different capacities
upstream game_servers {
    method weighted_round_robin;
    persistence cookie;  # Keep players on same game server
    
    server http://game1:6001 weight=5;  # High-capacity server
    server http://game2:6001 weight=5;  # High-capacity server
    server http://game3:6001 weight=2;  # Medium-capacity server
}

# Example 6: Notification service with no persistence needed
# Each notification is independent, so no persistence required
upstream notifications {
    method least_connections;
    persistence none;  # No persistence needed for one-off messages
    
    server http://notify1:7000 weight=1;
    server http://notify2:7000 weight=1;
    server http://notify3:7000 weight=1;
} 